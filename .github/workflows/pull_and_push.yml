name: Sync Multi-Architecture Images
on:
  push:
    branches:
      - main  # 根据需要调整触发分支
  schedule:
    - cron: '0 16 * * *'  # 每天 16:00 UTC 执行一次，即中国时间凌晨 0 点

jobs:
  sync-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Read images list
        id: read-images
        run: |
          if [ -f images.txt ]; then
            IMAGES=$(cat images.txt | tr '\n' ' ')
            echo "IMAGES=$IMAGES" >> $GITHUB_ENV
          else
            echo "No images.txt found!"
            exit 1
          fi

      - name: Create buildx instance
        run: |
          docker buildx create --use

      - name: Process each image
        run: |
          for IMAGE in $IMAGES; do
            echo "Processing $IMAGE"

            # Extract image name without registry path
            IMAGE_NAME=$(echo $IMAGE | awk -F'/' '{print $NF}')

            # Construct target image name
            TARGET_IMAGE="${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME"

            echo "Source Image: $IMAGE"
            echo "Target Image: $TARGET_IMAGE"

            # Check if target image exists
            if ! docker manifest inspect $TARGET_IMAGE > /dev/null 2>&1; then
              echo "Target image $TARGET_IMAGE does not exist, pushing first..."
              docker pull $IMAGE
              docker tag $IMAGE $TARGET_IMAGE
              docker push $TARGET_IMAGE
            else
              echo "Target image $TARGET_IMAGE exists, comparing architectures..."
              # Inspect source image architectures
              docker buildx imagetools inspect $IMAGE > source_inspect.txt

              # Inspect target image architectures
              docker buildx imagetools inspect $TARGET_IMAGE > target_inspect.txt

              # Compare architectures
              if diff source_inspect.txt target_inspect.txt > /dev/null; then
                echo "Architectures match for $IMAGE"
              else
                echo "Architectures do not match for $IMAGE, updating..."
                # Pull and push multi-architecture image
                docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 --pull --tag $TARGET_IMAGE --push $IMAGE
              fi
            fi
          done

      - name: Push multi-architecture manifest
        run: |
          for IMAGE in $IMAGES; do
            IMAGE_NAME=$(echo $IMAGE | awk -F'/' '{print $NF}')
            TARGET_IMAGE="${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME"

            echo "Creating and pushing manifest for $TARGET_IMAGE"
            docker buildx imagetools create --tag $TARGET_IMAGE $TARGET_IMAGE
          done
